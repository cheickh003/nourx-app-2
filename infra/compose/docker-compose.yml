## docker compose v2 n'utilise plus la cl√© 


services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: nourx_db
      POSTGRES_USER: nourx_user
      POSTGRES_PASSWORD: nourx_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nourx_user -d nourx_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI

  web:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ../../apps/api:/app
    ports:
      - "8000:8000"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://nourx_user:nourx_password@postgres:5432/nourx_db
      - REDIS_URL=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=nourx-bucket
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_REGION_NAME=us-east-1
      - AWS_S3_USE_SSL=false
      - AWS_S3_CUSTOM_DOMAIN=localhost:9000/nourx-bucket
      - "AWS_S3_URL_PROTOCOL=http:"
      - AWS_S3_ADDRESSING_STYLE=path
      - AWS_S3_SIGNATURE_VERSION=s3v4
      - AWS_QUERYSTRING_AUTH=false
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  worker:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    command: celery -A nourx worker -l info
    volumes:
      - ../../apps/api:/app
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://nourx_user:nourx_password@postgres:5432/nourx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - AWS_STORAGE_BUCKET_NAME=nourx-bucket
      - AWS_S3_ENDPOINT_URL=http://minio:9000
      - AWS_S3_REGION_NAME=us-east-1
      - AWS_S3_USE_SSL=false
      - AWS_S3_CUSTOM_DOMAIN=localhost:9000/nourx-bucket
      - "AWS_S3_URL_PROTOCOL=http:"
      - AWS_S3_ADDRESSING_STYLE=path
      - AWS_S3_SIGNATURE_VERSION=s3v4
      - AWS_QUERYSTRING_AUTH=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  beat:
    build:
      context: ../../apps/api
      dockerfile: Dockerfile
    command: celery -A nourx beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ../../apps/api:/app
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://nourx_user:nourx_password@postgres:5432/nourx_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  web-frontend:
    build:
      context: ../../apps/web
      dockerfile: Dockerfile.dev
    command: npm run dev
    volumes:
      - ../../apps/web:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - API_BASE_URL=http://web:8000
      - NEXT_PUBLIC_API_URL=http://web:8000

volumes:
  postgres_data:
  redis_data:
  minio_data:
