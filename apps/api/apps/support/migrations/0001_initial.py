# Generated by Django 4.2.23 on 2025-08-15 19:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("projects", "0001_initial"),
        ("clients", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ticket_number",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Numéro de ticket"
                    ),
                ),
                ("subject", models.CharField(max_length=200, verbose_name="Sujet")),
                ("description", models.TextField(verbose_name="Description")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Ouvert"),
                            ("in_progress", "En cours"),
                            ("waiting_client", "En attente client"),
                            ("waiting_internal", "En attente interne"),
                            ("resolved", "Résolu"),
                            ("closed", "Fermé"),
                            ("cancelled", "Annulé"),
                        ],
                        default="open",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Basse"),
                            ("normal", "Normale"),
                            ("high", "Haute"),
                            ("urgent", "Urgente"),
                            ("critical", "Critique"),
                        ],
                        default="normal",
                        max_length=10,
                        verbose_name="Priorité",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("web", "Interface web"),
                            ("email", "Email"),
                            ("phone", "Téléphone"),
                            ("chat", "Chat"),
                            ("internal", "Interne"),
                        ],
                        default="web",
                        max_length=10,
                        verbose_name="Source",
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date d'échéance"
                    ),
                ),
                (
                    "first_response_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Première réponse le"
                    ),
                ),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Résolu le"
                    ),
                ),
                (
                    "closed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fermé le"
                    ),
                ),
                (
                    "sla_deadline",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Échéance SLA"
                    ),
                ),
                (
                    "response_time_minutes",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Temps de réponse (minutes)"
                    ),
                ),
                (
                    "resolution_time_minutes",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Temps de résolution (minutes)",
                    ),
                ),
                (
                    "satisfaction_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "1 étoile"),
                            (2, "2 étoiles"),
                            (3, "3 étoiles"),
                            (4, "4 étoiles"),
                            (5, "5 étoiles"),
                        ],
                        null=True,
                        verbose_name="Note de satisfaction",
                    ),
                ),
                (
                    "satisfaction_comment",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Commentaire de satisfaction",
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True,
                        help_text="Tags séparés par des virgules",
                        max_length=200,
                        null=True,
                        verbose_name="Tags",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Visible par le client",
                        verbose_name="Public",
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Nombre de vues"
                    ),
                ),
                (
                    "last_activity_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière activité"
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigné à",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket",
                "verbose_name_plural": "Tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=100, verbose_name="Nom de la catégorie"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Couleur hexadécimale (ex: #007bff)",
                        max_length=7,
                        verbose_name="Couleur",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                ("order", models.PositiveIntegerField(default=0, verbose_name="Ordre")),
            ],
            options={
                "verbose_name": "Catégorie de ticket",
                "verbose_name_plural": "Catégories de tickets",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="TicketMessage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("reply", "Réponse"),
                            ("note", "Note interne"),
                            ("status_change", "Changement de statut"),
                            ("assignment", "Assignation"),
                        ],
                        default="reply",
                        max_length=15,
                        verbose_name="Type de message",
                    ),
                ),
                ("content", models.TextField(verbose_name="Contenu")),
                (
                    "is_internal",
                    models.BooleanField(
                        default=False,
                        help_text="Visible seulement par l'équipe NOURX",
                        verbose_name="Message interne",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Adresse IP"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(blank=True, null=True, verbose_name="User Agent"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ticket_messages",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Auteur",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="support.ticket",
                        verbose_name="Ticket",
                    ),
                ),
            ],
            options={
                "verbose_name": "Message de ticket",
                "verbose_name_plural": "Messages de tickets",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "file",
                    models.FileField(
                        upload_to="support/attachments/", verbose_name="Fichier"
                    ),
                ),
                (
                    "file_name",
                    models.CharField(max_length=255, verbose_name="Nom du fichier"),
                ),
                ("file_size", models.BigIntegerField(verbose_name="Taille du fichier")),
                (
                    "mime_type",
                    models.CharField(max_length=100, verbose_name="Type MIME"),
                ),
                (
                    "message",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="support.ticketmessage",
                        verbose_name="Message",
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="support.ticket",
                        verbose_name="Ticket",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ticket_attachments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Téléchargé par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pièce jointe de ticket",
                "verbose_name_plural": "Pièces jointes de tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="ticket",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tickets",
                to="support.ticketcategory",
                verbose_name="Catégorie",
            ),
        ),
        migrations.AddField(
            model_name="ticket",
            name="client",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="tickets",
                to="clients.client",
                verbose_name="Client",
            ),
        ),
        migrations.AddField(
            model_name="ticket",
            name="project",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tickets",
                to="projects.project",
                verbose_name="Projet",
            ),
        ),
        migrations.AddField(
            model_name="ticket",
            name="reporter",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reported_tickets",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Rapporté par",
            ),
        ),
        migrations.AddIndex(
            model_name="ticketmessage",
            index=models.Index(
                fields=["ticket", "created_at"], name="support_tic_ticket__0cd9bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketmessage",
            index=models.Index(
                fields=["author"], name="support_tic_author__503d4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketmessage",
            index=models.Index(
                fields=["message_type"], name="support_tic_message_6220bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketattachment",
            index=models.Index(
                fields=["ticket"], name="support_tic_ticket__907513_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticketattachment",
            index=models.Index(
                fields=["message"], name="support_tic_message_2c3e9d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["client", "status"], name="support_tic_client__ccdd68_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["assigned_to", "status"], name="support_tic_assigne_6ed26f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["status", "priority"], name="support_tic_status_a0fe0d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["ticket_number"], name="support_tic_ticket__d87f40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["due_date"], name="support_tic_due_dat_d47018_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="ticket",
            index=models.Index(
                fields=["sla_deadline"], name="support_tic_sla_dea_7789f9_idx"
            ),
        ),
    ]
