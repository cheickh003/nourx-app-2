<script>
	import { onMount } from 'svelte';
	import { Card, Table, TableBody, TableBodyCell, TableBodyRow, TableHead, TableHeadCell, Badge, Button, Search, Pagination, Modal, Label, Input, Textarea, Select, Spinner, Alert } from 'flowbite-svelte';
	import { accountsApi } from '$lib/api/accounts';
	import { toastStore } from '$lib/stores/toast';

	// Data state
	let organizations = [];
	let selectedOrganization = null;
	let organizationStats = {};
	
	// UI state
	let isLoading = true;
	let isCreating = false;
	let isUpdating = false;
	let isDeleting = false;
	let error = null;
	
	// Search and pagination
	let searchTerm = '';
	let currentPage = 1;
	let itemsPerPage = 10;
	let totalPages = 1;
	let totalItems = 0;
	let statusFilter = '';
	let sortBy = 'name';
	let sortOrder = 'asc';
	
	// Modals state
	let showCreateModal = false;
	let showEditModal = false;
	let showViewModal = false;
	let showDeleteModal = false;
	
	// Form data
	let createForm = {
		name: '',
		description: '',
		domain: '',
		settings: {}
	};
	
	let editForm = {
		id: null,
		name: '',
		description: '',
		domain: '',
		settings: {}
	};

	// Load organizations on mount
	onMount(() => {
		loadOrganizations();
	});

	// Reactive: reload when search/pagination changes
	$: if (searchTerm !== undefined || currentPage !== undefined || statusFilter !== undefined || sortBy !== undefined || sortOrder !== undefined) {
		loadOrganizations();
	}

	async function loadOrganizations() {
		try {
			isLoading = true;
			error = null;
			
			const params = {
				page: currentPage,
				limit: itemsPerPage,
				search: searchTerm || undefined,
				status: statusFilter || undefined,
				sortBy,
				sortOrder
			};
			
			const result = await accountsApi.organizations.getAll(params);
			organizations = result.organizations || [];
			totalItems = result.totalItems || 0;
			totalPages = result.totalPages || 1;
			
		} catch (err) {
			error = err.message;
			toastStore.error('Failed to load organizations');
			console.error('Error loading organizations:', err);
		} finally {
			isLoading = false;
		}
	}

	async function handleCreateOrganization() {
		try {
			isCreating = true;
			
			await accountsApi.organizations.create(createForm);
			
			toastStore.success('Organization created successfully');
			showCreateModal = false;
			resetCreateForm();
			await loadOrganizations();
			
		} catch (err) {
			toastStore.error('Failed to create organization: ' + err.message);
		} finally {
			isCreating = false;
		}
	}

	async function handleEditOrganization() {
		try {
			isUpdating = true;
			
			const { id, ...updateData } = editForm;
			await accountsApi.organizations.update(id, updateData);
			
			toastStore.success('Organization updated successfully');
			showEditModal = false;
			resetEditForm();
			await loadOrganizations();
			
		} catch (err) {
			toastStore.error('Failed to update organization: ' + err.message);
		} finally {
			isUpdating = false;
		}
	}

	async function handleDeleteOrganization() {
		if (!selectedOrganization) return;
		
		try {
			isDeleting = true;
			
			await accountsApi.organizations.delete(selectedOrganization.id);
			
			toastStore.success('Organization deleted successfully');
			showDeleteModal = false;
			selectedOrganization = null;
			await loadOrganizations();
			
		} catch (err) {
			toastStore.error('Failed to delete organization: ' + err.message);
		} finally {
			isDeleting = false;
		}
	}

	async function handleToggleStatus(org) {
		try {
			const newStatus = !org.active;
			await accountsApi.organizations.toggleStatus(org.id, newStatus);
			
			toastStore.success(`Organization ${newStatus ? 'activated' : 'deactivated'} successfully`);
			await loadOrganizations();
			
		} catch (err) {
			toastStore.error('Failed to update organization status: ' + err.message);
		}
	}

	async function viewOrganization(org) {
		selectedOrganization = org;
		showViewModal = true;
		
		// Load organization stats
		try {
			organizationStats = await accountsApi.organizations.getStats(org.id);
		} catch (err) {
			console.error('Failed to load organization stats:', err);
		}
	}

	function openCreateModal() {
		resetCreateForm();
		showCreateModal = true;
	}

	function openEditModal(org) {
		editForm = {
			id: org.id,
			name: org.name,
			description: org.description || '',
			domain: org.domain || '',
			settings: org.settings || {}
		};
		showEditModal = true;
	}

	function openDeleteModal(org) {
		selectedOrganization = org;
		showDeleteModal = true;
	}

	function resetCreateForm() {
		createForm = {
			name: '',
			description: '',
			domain: '',
			settings: {}
		};
	}

	function resetEditForm() {
		editForm = {
			id: null,
			name: '',
			description: '',
			domain: '',
			settings: {}
		};
	}

	function onPageChange(event) {
		currentPage = event.detail.page;
	}
</script>

<svelte:head>
	<title>Organizations - NOURX Admin</title>
</svelte:head>

<div class="space-y-6">
	<!-- Header -->
	<div class="flex justify-between items-center">
		<div>
			<h1 class="text-2xl font-bold text-slate-900 dark:text-slate-50">Organizations</h1>
			<p class="text-slate-600 dark:text-slate-400 mt-1">Manage client organizations and their settings</p>
		</div>
		<Button color="primary" size="sm">
			<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
			</svg>
			New Organization
		</Button>
	</div>

	<!-- Filters -->
	<Card class="p-4">
		<div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
			<Search bind:value={searchTerm} placeholder="Search organizations..." class="w-full sm:w-64" />
			<div class="flex gap-2">
				<Badge color="blue" large>Total: {organizations.length}</Badge>
			</div>
		</div>
	</Card>

	<!-- Organizations Table -->
	<Card>
		<div class="p-6 pb-2">
			<h2 class="text-lg font-semibold">Organizations List</h2>
		</div>
		
		<Table hoverable>
			<TableHead>
				<TableHeadCell>Organization</TableHeadCell>
				<TableHeadCell>Users</TableHeadCell>
				<TableHeadCell>Status</TableHeadCell>
				<TableHeadCell>Created</TableHeadCell>
				<TableHeadCell>Actions</TableHeadCell>
			</TableHead>
			<TableBody>
				{#each organizations as org}
					<TableBodyRow>
						<TableBodyCell>
							<div class="font-medium text-slate-900 dark:text-slate-50">{org.name}</div>
							<div class="text-sm text-slate-500">ID: {org.id}</div>
						</TableBodyCell>
						<TableBodyCell>
							<Badge color="dark">{org.users} users</Badge>
						</TableBodyCell>
						<TableBodyCell>
							<Badge color={org.status === 'Active' ? 'green' : 'red'}>{org.status}</Badge>
						</TableBodyCell>
						<TableBodyCell class="text-slate-600 dark:text-slate-400">{org.created}</TableBodyCell>
						<TableBodyCell>
							<div class="flex gap-2">
								<Button color="alternative" size="xs">View</Button>
								<Button color="alternative" size="xs">Edit</Button>
							</div>
						</TableBodyCell>
					</TableBodyRow>
				{/each}
			</TableBody>
		</Table>
		
		<div class="flex justify-center mt-4">
			<Pagination pages={[{ name: '1', href: '#', active: true }]} />
		</div>
	</Card>
</div>
